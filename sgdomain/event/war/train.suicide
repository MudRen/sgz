// train.c 
// this is used to handle the the train process
// by fire on Dec 13, 1998
#include <train.h>
void release_army(int p_id);
void train(string p_area,string leader,string* group)
{
    string att_name,att_id;
    int t_num;
    string s_room;
    mixed m_us;
    string p_leader;
    int i;
    string* u_list;
	AREA_D->store_soldiers(p_area);
    t_num=TASK_D->add_task(TT_TRAIN);
        
    att_id="train aim";
    att_name="目标部队";
    CHANNEL_D->deliver_tell("rumor","system",
      CHAR_D->get_char(leader,"name")+"在"+
      AREA_D->get_area(p_area,"name")+"大规模操练兵士。");
    TASK_D->set_task(t_num,"def_area",p_area);
    TASK_D->set_task(t_num,"area",p_area);
    TASK_D->set_task(t_num,"att_area",p_area);
    TASK_D->set_task(t_num,"att_id",att_id);
    TASK_D->set_task(t_num,"att_name",att_name);
    WARAI_D->create_inf(t_num);
    u_list=group;
    TASK_D->set_task(t_num,"def_party",u_list);     
    m_us=([]);
    for(i=0;i<sizeof(u_list);++i)
    {
       m_us[u_list[i]]=1;  // need to disable current task
    }
    m_us[leader]=2;
    TASK_D->set_task(t_num,"chars",m_us);
    MAP_D->add_city(p_area);
    TASK_D->set_task(t_num,"def_leader",leader);
    TASK_D->set_task(t_num,"timaim",2); // 10 second to prepare
    TASK_D->set_task(t_num,"stage",TRAIN_BEG);
    train_arrange(t_num);
}
void train_process(int p_id)
{
  int res,curtime,stage;
  mixed question;
  stage=TASK_D->get_task(p_id,"stage");
  switch(stage)
  {
  case TRAIN_BEG:
    train_collect(p_id);
    TASK_D->set_task(p_id,"stage",TRAIN_PROCESS);
    break;
  case TRAIN_PROCESS:
    curtime=TASK_D->get_task(p_id,"curtime");
    TASK_D->set_task(p_id,"curtime",curtime+1);
    res=check_question(p_id);
    switch(res)
    {
        case QUESTION_PROCESS:
            return;
        case QUESTION_OVER_DUE:
            question_overdue(p_id);
            break;
        case QUESTION_FAIL:
            question_fail(p_id);
            TASK_D->set_task(p_id,"stage",TRAIN_END);
            return;
        case QUESTION_SUCCESS:
            question_success(p_id);
            break;
        case NO_QUESTION:
            break; 
        default:
            question_wrong(p_id);
            break;
    }
    question=new_question(p_id);
    if(!question) // no other questions
       TASK_D->set_task(p_id,"stage",TRAIN_END);
    else
       question_new(p_id,question);
    break;
  case TRAIN_END:
    train_over(p_id);
    break;
  case AFTER_TRAIN: 
    release_army(p_id);
    TASK_D->remove_task(p_id);
  }
}
