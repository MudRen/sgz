// suggest.c
// this is used for national suggestion system
static private mapping m_suggest=([]);
int have_enough_stuf(string b_area,string p_stuf,string typ,int val);


private mapping leg_suggest = ([

"tran" : 
"调配部队和物资。
格式：na $tran <起始地> <目的地> <兵种或物资或金> <数量>
例如：na $tran changan huayin footman 1000\n",

"nationtax" : 
"调整地区国家税率，提出者：当地太守或国家官员。
格式：na $nationtax [area_id] <税率>\n",

"check" : "查阅当前建议情况。\n",
]);

void deliever_tell(string p_id,string n_id,string msg);
mixed deliever_semote(string p_id,string n_id,string msg);
void deliever_emote(string p_id,string n_id,string msg);


int query_group_value(string *g)
{
	int p_ret=0;
	if(!sizeof(g)) return 0;
	foreach(string p_id in g)
              p_ret+=CHAR_D->get_char(p_id,"level");
        return p_ret;
}

void do_tran(string n_id) {
	mapping para;
	string b_area,t_area;
	string p_stuff;
	string typ,name;
	int val;
	string p_id;

	int rea,reab;
	string dis;

	p_id=m_suggest[n_id]["who"];
	para=m_suggest[n_id]["para"];
	b_area=para[0];t_area=para[1];p_stuff=para[2];val=para[3];
	typ=para[4]; name=para[5];
	if(!have_enough_stuf(b_area,p_stuff,typ,val)){
		deliever_tell(p_id,n_id,"不知什么原因，"+AREA_D->get_area(b_area,"name")+
		"又没有那么多"+name+"。运输取消。\n");
		return;
	}

	switch (typ) {
		case "gold" :
		case "stuff" :
			AREA_D->set_area(b_area,p_stuff,
				AREA_D->get_area(b_area,p_stuff)-val);
			rea=AREA_D->get_area(b_area,"safe")+
				AREA_D->get_area(t_area,"safe");
			break;
		default :
			AREA_D->set_area_soldier(b_area,p_stuff,
				AREA_D->get_area_soldier(b_area,p_stuff)-val);
			rea=AREA_D->get_area(b_area,"train")+
				AREA_D->get_area(b_area,"morale");
			
			break;
	}

	rea/=4;
	reab=random(rea);
	
	if((reab<10)&&(rea<100)) {
		val=0;
		dis="非常不幸，全部"+name+"在旅途丢失。";
	}
	else if((reab<40)){ // &&(rea<100)) {
		val*=rea;
		val/=110;
		if(typ=="troop") 
			dis="由于种种原因，";
		else
			dis="由于种种原因，";
		if(val)
			dis+="只有"+chinese_number(val)+name+
			"安全到达"+AREA_D->get_area(t_area,"name")+"。";
		else
			dis+="全部"+name+"在旅途丢失。";		
	}
	else
		dis="非常幸运，所有"+chinese_number(val)+name+
			"全部安全到达"+AREA_D->get_area(t_area,"name")+"。";

	switch (typ) {
		case "gold" :
		case "stuff" :
			AREA_D->set_area(t_area,p_stuff,
				AREA_D->get_area(t_area,p_stuff)+val);
			break;
		default :
			AREA_D->add_soldier(t_area,p_stuff,val,
				AREA_D->get_area(b_area,"morale")-10,
				AREA_D->get_area(b_area,"train"));
			
			break;
	}

	deliever_tell(p_id,n_id,dis);

}
void discuss_succ(string n_id) {
	string msg;
	msg="好，支持点数超过反对点数，建议通过。来人，传令："+
		m_suggest[n_id]["str"]+"。";
	CHANNEL_D->deliver_tell("rumor","system",
		COUNTRY_D->get_country(n_id,"name")+m_suggest[n_id]["str"]+"。");  
	switch(m_suggest[n_id]["topic"]) {
		case "nationtax": {
			string p_a;
			int o_t,n_t;
			int safe;
			p_a=m_suggest[n_id]["para"][0];
			o_t=m_suggest[n_id]["para"][1];
			n_t=m_suggest[n_id]["para"][2];
			if(n_t>o_t) {
				safe=AREA_D->get_area(p_a,"safe")-(n_t-o_t);
				if(safe<0) safe=0;
				AREA_D->set_area(p_a,"safe",safe);
			}
			AREA_D->set_area(p_a,"taxnation",n_t);
		}
		break;
		case "tran" :
			do_tran(n_id);
		default :
		break;	
	}
	m_suggest[n_id]=([]);
}
void discuss_fail(string n_id) {
	string msg;
	msg="看来关于"+m_suggest[n_id]["str"]+"的问题今天讨论不出结果，这个问题回头再说了。";
	deliever_tell(n_id,n_id,msg);
	m_suggest[n_id]=([]);
}

mixed deliever_vote(string p_id, string n_id,string vot) {
	string who;
	string *ag_set=({"agree ","support ","agree","uadme ","great",
		"great ","admire "});
	string *ds_set=({"disagree","disagree ","ack ","no","ack"});
	string *nu_set=({"nosay","pure","wake","fool","nothing"});
	string emt;
	string spk;
	if(!mapp(m_suggest[n_id])) { 
		m_suggest[n_id]=([]);
		return "现在没有什么建议值得表决。\n"; }

	if(!arrayp(m_suggest[n_id]["whole_group"])) { 
		return "现在没有什么建议值得表决。\n"; }

	if(member_array(p_id,m_suggest[n_id]["whole_group"])==-1) 
		return "讨论的东西与你无关。\n";

	if(member_array(p_id,m_suggest[n_id]["rest_group"])==-1) 
		return "你已经表过态了。\n";

	who=m_suggest[n_id]["who"];

	switch(vot) {
		case "agree" :
			emt=ag_set[random(sizeof(ag_set))];
			spk="我支持"+m_suggest[n_id]["str"]+"。";
			m_suggest[n_id]["rest_group"]-=({p_id});
			m_suggest[n_id]["agree_group"]+=({p_id});
			break;
		case "disagree" :
			emt=ds_set[random(sizeof(ds_set))];
			spk="我反对"+m_suggest[n_id]["str"]+"。";
			m_suggest[n_id]["rest_group"]-=({p_id});
			m_suggest[n_id]["disagree_group"]+=({p_id});
			break;
		case "neutral" :
			emt=nu_set[random(sizeof(nu_set))];
			spk="我对"+m_suggest[n_id]["str"]+"没有意见。";
			m_suggest[n_id]["rest_group"]-=({p_id});
			m_suggest[n_id]["neutral_group"]+=({p_id});
			break;
		default :
			return "请明确表达你的意见。\n";		
	}
	if(emt[<1]==' ') emt+=who;
	deliever_tell( p_id, n_id,spk);
	return 1;	
}
void npc_char_consider(string n_id, string p_id) {
	switch(random(3)) // use simple first :)))))))
	{
		case 0:
			deliever_vote( p_id, n_id,"agree");
			return;
		case 1:
			deliever_vote( p_id, n_id,"disagree");
			return;
		case 2:
			deliever_vote( p_id, n_id,"neutral");
			return;
	}
}

void char_consider(string n_id,string p_id) {
	if(p_id==n_id) 
		deliever_tell(n_id,n_id,"让我想一想。") ;
	else
		deliever_tell(n_id,n_id,"请"+
			CHAR_D->get_char(p_id,"name")+"谈谈意见。") ;
	if(!objectp(find_body(p_id))) {
		npc_char_consider(n_id,p_id);
	}
}
void discuss_consider(string n_id){
	string *rest;
	rest=m_suggest[n_id]["rest_group"];
	if(!sizeof(rest)) {SGSYS("should not no ppl left");}
	foreach(string s in rest) {
		if(!objectp(find_body(s))) {
			char_consider(n_id,s);
			return;
		}
	}
	char_consider(n_id,rest[random(sizeof(rest))]);
}
void discuss_suggest(string n_id) {
	int a_p,d_p,n_p,r_p;
	int min_round;
	if(!mapp(m_suggest[n_id])) return ;
	if((!m_suggest[n_id]["status"])||(m_suggest[n_id]["status"]=="over")) {
		m_suggest[n_id]=([]);
		return;
	}
	a_p=query_group_value(m_suggest[n_id]["agree_group"]);
	d_p=query_group_value(m_suggest[n_id]["disagree_group"]);
	n_p=query_group_value(m_suggest[n_id]["neutral_group"]);
	r_p=query_group_value(m_suggest[n_id]["rest_group"]);
	if(a_p>(d_p+r_p)) { discuss_succ(n_id); return; }
	if(d_p>=(a_p+r_p)) { discuss_fail(n_id); return; }
	min_round=sizeof(m_suggest[n_id]["whole_group"])+3;
	if(m_suggest[n_id]["round"]>min_round) {
		discuss_fail(n_id); return;
	}
	m_suggest[n_id]["round"]++;
	call_out("discuss_suggest",random(10)+10,n_id);
	discuss_consider(n_id);
}

string check_suggest(string n_id){
	string ret;
	if(!mapp(m_suggest[n_id])) return "目前没有任何建议。\n";
	if((!m_suggest[n_id]["status"])||(m_suggest[n_id]["status"]=="over"))
		return "目前没有任何建议。\n";
	ret="目前讨论主题："+m_suggest[n_id]["str"]+"\n";
	ret+="提议者："+CHAR_D->get_char(m_suggest[n_id]["who"],"name")+"。\n";
	ret+="会议人数："+chinese_number(sizeof(m_suggest[n_id]["whole_group"]))+"。\n";
	ret+="支持点："+chinese_number(query_group_value(m_suggest[n_id]["agree_group"]));
	ret+="   反对点："+chinese_number(query_group_value(m_suggest[n_id]["disagree_group"]));
	ret+="   中立点："+chinese_number(query_group_value(m_suggest[n_id]["neutral_group"]));
	ret+="   未表态点："+chinese_number(query_group_value(m_suggest[n_id]["rest_group"]));
	ret+="。\n";
	ret+="讨论轮数："+chinese_number(m_suggest[n_id]["round"])+"。\n";
	return ret;
}
mixed get_suggest(string n_id,string what) {
	if(!n_id) return m_suggest;
	if(!what) return m_suggest[n_id];
	return m_suggest[n_id][what];
}
mixed set_suggest (string n_id,string what,mixed val) {
	if(!m_suggest[n_id]) return n_id+" don't have suggest now\n";
	m_suggest[n_id][what]=val;
	return m_suggest[n_id];
}
string no_legal_suggest() {
	string ret;
	ret="你的建议系统无法理解。\n";
	ret+="目前可以理解的建议有：\n";
	ret+=implode(keys(leg_suggest),"  ");
	return ret+"\n";
}

void add_suggest(string n_id,string topic,mixed para, string who, string * areas ) {
	string *ids,id;
	
	ids=CHAR_D->check_char("nation",n_id);
	ids=filter_array(ids,(: CHAR_D->get_char($1,"ranknation") :));
	if(sizeof(areas)) {
		foreach(string s in areas) {
			id=AREA_D->get_area(s,"leader");
			ids-=({id});
			ids+=({id});
		}
	}
	if(sizeof(ids)>12) {
		string *npcs;
		npcs=filter_array(ids,(: !objectp(find_body($1)) :));
		ids-=npcs;
		while(sizeof(ids)<12) {
			ids+=({npcs[0]});
			npcs-=({npcs[0]});
		}
	}
	if(!m_suggest[n_id]) m_suggest[n_id]=([]);
	m_suggest[n_id]["status"]="give";
	m_suggest[n_id]["who"]=who;
	m_suggest[n_id]["topic"]=topic;
	m_suggest[n_id]["para"]=para;
	m_suggest[n_id]["agree_group"]=({who});
	m_suggest[n_id]["disagree_group"]=({});
	m_suggest[n_id]["neutral_group"]=({});
	m_suggest[n_id]["rest_group"]=ids-({who});
	m_suggest[n_id]["whole_group"]=ids;
	m_suggest[n_id]["round"]=0;
}

void announce_suggest(string n_id) {
	string p_id;
	p_id=m_suggest[n_id]["who"];
	if(p_id==n_id) // this king
		deliever_tell(p_id, n_id,"诸位爱卿，朕以为"+m_suggest[n_id]["reason"]+
		"，"+"当可"+m_suggest[n_id]["str"]+"，"+
		"诸位爱卿意下如何。");
	else
		deliever_tell(p_id, n_id,"吾王万岁万万岁，臣以为"+m_suggest[n_id]["reason"]+
		"，"+"当可"+m_suggest[n_id]["str"]+"，"+
		"陛下与各位同僚意下如何。");
}
mixed sug_nationtax(string p_id,string n_id,string p_area,int n_tax){
	int o_tax;
	if( !CHAR_D->get_char(p_id,"ranknation") && 
		(CHAR_D->get_char(p_id,"area") != p_area) )
		return "别人的地盘，你操什么心。\n";
	if(AREA_D->get_area(p_area,"nation")!=n_id)
		return "别人的地盘，你操什么心。\n";
	if((n_tax>20)) 
		return "国家税率不能超过20。\n";
	if((n_tax<0)) 
		return "怎么会有负税率。\n";

	o_tax=AREA_D->get_area(p_area,"taxnation");
	if(o_tax==n_tax) return "目前税率正是"+chinese_number(n_tax)+"。\n";

	add_suggest(n_id,"nationtax",({p_area,o_tax,n_tax}), p_id, ({p_area}));

	if(n_tax>o_tax) {
	  m_suggest[n_id]["str"]="将"+AREA_D->get_area(p_area,"name")+
		"的国家税率由"+chinese_number(o_tax)+"增加到"+chinese_number(n_tax);
	  m_suggest[n_id]["reason"]="目前国库空虚";
	}
	else {
	  m_suggest[n_id]["str"]="将"+AREA_D->get_area(p_area,"name")+
		"的国家税率由"+chinese_number(o_tax)+"降低到"+chinese_number(n_tax);
	  m_suggest[n_id]["reason"]="目前国库充盈";
	}
	announce_suggest(n_id);
	call_out("discuss_suggest",2,n_id);
	return 1;
}
mixed legal_stuff(string p_stuf) {
	string *lst;
	if(p_stuf=="gold") return "gold"; // gold
	lst=TROOP_TYPE_D->get_troop_type("list");
	if(member_array(p_stuf,lst)!=-1) return "troop"; // troop
	lst=(EV_MERCHANT)->query_goods("list");
	if(member_array(p_stuf,lst)!=-1) return "stuff"; // stuff
	return 0; // illegal
}
string stuff_name(string p_stuf,string typ) {
	switch(typ) {
		case "gold": return "黄金";
		case "troop" : return TROOP_TYPE_D->get_troop_type(p_stuf,"name");
		case "stuff" : return (EV_MERCHANT)->query_goods(p_stuf,"name");
		default : return "未知货物";
	}
}

int have_enough_stuf(string b_area,string p_stuf,string typ,int val) {
	mapping tmp;
	switch(typ) {
		case "gold": 
			if(AREA_D->get_area(b_area,"gold")>=val)
				return 1;
			return 0;
		case "troop" : 
			tmp=AREA_D->get_area(b_area,"troop");
			if(!mapp(tmp)) tmp=([]);
			if(tmp[p_stuf]>=val) return 1;
			return 0;
		default :
			if(AREA_D->get_area(b_area,p_stuf)>=val)
				return 1;
			return 0;
			
	}
}
mixed sug_tran(string p_id,string n_id,string *para) {
	string b_area,t_area;
	string p_stuff;
	string typ,name;
	int val;

	if(sizeof(para)<5) return "错误的格式。正确格式：\n"+leg_suggest["tran"];
	if(sizeof(para)>6) return "错误的格式。正确格式：\n"+leg_suggest["tran"];

	b_area=para[1];
	if(!AREA_D->area_exist(b_area)) return "没有"+b_area+"这个地区。\n";
	if(AREA_D->get_area(b_area,"nation")!=n_id) 
		return AREA_D->get_area(b_area,"name")+"不属于本国。\n";
	t_area=para[2];
	if(!AREA_D->area_exist(t_area)) return "没有"+t_area+"这个地区。\n";
	if(AREA_D->get_area(t_area,"nation")!=n_id) 
		return AREA_D->get_area(t_area,"name")+"不属于本国。\n";

	if(AREA_D->get_distance(b_area,t_area)!=1) 
		return AREA_D->get_area(t_area,"name")+"与"+
			AREA_D->get_area(b_area,"name")+"不是相邻地区。\n";

	if( !CHAR_D->get_char(p_id,"ranknation") && 
		(CHAR_D->get_char(p_id,"area") != b_area) &&
		(CHAR_D->get_char(p_id,"area") != t_area))
		return "别人的地盘，你操什么心。\n";

	if(sizeof(para)==6){
		p_stuff=para[3]+" "+para[4] ; val=to_int(para[5]); }
	else {
		p_stuff=para[3]; val=to_int(para[4]); }
	typ=legal_stuff(p_stuff);
	if(!stringp(typ)) return "没有"+p_stuff+"这种货物或兵种。\n";
	if(val<=0) return "运输数量必需大于零。\n";
	name=stuff_name(p_stuff,typ);
	if(!have_enough_stuf(b_area,p_stuff,typ,val)) return AREA_D->get_area(b_area,"name")+
		"没有那么多"+name+"。\n";


	add_suggest(n_id,"tran",({b_area,t_area,p_stuff,val,typ,name}), p_id, ({b_area,t_area}));

	  m_suggest[n_id]["str"]="将"+AREA_D->get_area(b_area,"name")+
		"的"+name+"调"+chinese_number(val)+"到"+AREA_D->get_area(t_area,"name");
	  m_suggest[n_id]["reason"]="为平衡发展";

	announce_suggest(n_id);
	call_out("discuss_suggest",2,n_id);
	return 1;
}
mixed deliever_suggest(string p_id,string n_id,string msg) {
	string a_id,p_area;
	string *paras;
	int argc;

	if(!mapp(m_suggest[n_id])) m_suggest[n_id]=([]);
	if(msg=="check") return check_suggest(n_id);
	if(stringp(m_suggest[n_id]["status"])&&(m_suggest[n_id]["status"]!="over"))
		return "目前正在讨论上一项建议。\n";
	a_id=CHAR_D->get_char(p_id,"area");
	if((AREA_D->get_area(a_id,"leader")!=p_id)&&
		(!CHAR_D->get_char(p_id,"ranknation")))
		return "只有国家官员和地区太守才能提出国家建议。\n";
	if(!sizeof(msg)) return msg="---";
	paras=explode(msg," ");
	argc=sizeof(paras);
	p_area=a_id;
	switch(paras[0]) {
		case "nationtax" :
			if((argc<2)||(argc>3)) {
				return leg_suggest[paras[0]];
			}
			if(argc==3) {
				p_area=paras[1];
				return sug_nationtax(p_id,n_id,p_area,to_int(paras[2]));
			}
			return sug_nationtax(p_id,n_id,p_area,to_int(paras[1]));
		case "tran" :
			return sug_tran(p_id,n_id,paras);
		default :
			return no_legal_suggest();
	}
}